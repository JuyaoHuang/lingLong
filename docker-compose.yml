# 博客集成部署环境配置
# 用途：在PC上模拟树莓派生产环境的完整部署架构

services:
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: sim_backend
    # 启动命令：开启热重载支持实时开发
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    # 卷挂载
    volumes:
      - ./backend/app:/code/app          # 后端代码
      - ./backend/data:/code/data        # SQLite数据库
      - ./lingLong:/code/lingLong            # Astro项目（后端操作Markdown文件）
      - /code/lingLong/node_modules        # 匿名卷：防止宿主机node_modules覆盖容器内的Linux版本
      - dist_volume:/code/lingLong/dist    # 命名卷：backend和nginx共享dist
    # 环境变量
    environment:
      - ENVIRONMENT=production           # 环境标识
      - ASTRO_CONTENT_PATH=/code/lingLong/src/contents/posts
      - ASTRO_PROJECT_PATH=/code/lingLong
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}  # 从 .env 文件读取（PASSWORD不提交到 Git）
      - SECRET_KEY=${SECRET_KEY}         # JWT 密钥
    # 健康检查：确保服务完全启动
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    # 资源限制：适配树莓派4 (2GB内存)
    deploy:
      resources:
        limits:
          memory: 1G      # 后端最大占用1G内存
        reservations:
          memory: 512M    # 预留512M内存
    # 注意：不对外暴露端口，只通过nginx访问

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: sim_nginx
    # 端口映射：主机的8090端口 → 容器的80端口
    ports:
      - "8090:80"
    volumes:
      - dist_volume:/usr/share/nginx/html:ro  # 命名卷：与backend共享，只读
    # 资源限制：适配树莓派4 (2GB内存)
    deploy:
      resources:
        limits:
          memory: 256M    # Nginx最大占用256M内存
        reservations:
          memory: 128M    # 预留128M内存
    # 依赖关系：等待backend健康检查通过后再启动nginx
    depends_on:
      backend:
        condition: service_healthy

# 网络配置（可选，Docker Compose会自动创建）
networks:
  default:
    name: blog_network

# 定义命名卷
volumes:
  dist_volume: