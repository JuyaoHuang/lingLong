---
//核心作用是在网站的列表页面（如首页、分类页、标签页）上，以“卡片”的形式展示单篇博客文章的摘要信息。
// 你可以把它想象成一本书的封面和简介：它不是文章的全部内容，
// 但它提供了足够的信息（标题、封面、日期、分类等）来吸引读者点击并进入完整的文章页面。
import { IdToSlug } from "../utils/hash";// 将文章ID转换成适合用在URL中的格式（slug）
import { Icon } from "astro-icon/components";
import PostCardInfoIcon from "./widgets/PostCardInfoIcon.astro";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { i18n } from "../locales/translation";
import I18nKeys from "../locales/keys";
import LingLongConfig from "../../linglong.config";
import { formatDate } from "../utils/date";
//属性接口定义
//定义了要使用这个组件，你必须向它传递哪些数据（Props）
//修改：支持二级分类系统，将原来的 category 字段拆分为 first_level_category 和 second_level_category
export interface Props {
  id: string;
  title: string;
  published: Date;
  first_level_category?: string;  // 一级分类：如"编程合集"、"AI前沿"等
  second_level_category?: string; // 二级分类：如"Python"、"Vue"等
  tags?: string[];
  description?: string;
  image?: string;
  readingMetadata?: { wordCount: number };
}

const props = Astro.props;
const entryID = IdToSlug(props.id);
const contentUrl = `/posts/${entryID}`;//根据文章ID生成了指向文章详情页的URL链接。
const { wordCount } = props.readingMetadata || {};//从阅读元数据中解构出字数，方便在模板中使用

---
<!-- 使用 Tailwind CSS 来构建卡片的视觉样式，并把上面逻辑部分处理好的数据显示出来 -->
<div
  class="mx-3 flex flex-col rounded-3xl bg-[var(--card-color)] lg:mx-0 lg:h-[212px]"
>
  <a
    href={contentUrl}
    class="relative h-[128px] transition-all hover:brightness-75 lg:hidden"
  >
    <img
      class="lozad absolute left-0 top-0 h-full w-full rounded-t-3xl object-cover lg:hidden"
      data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
      alt="CoverPost"
    />
    <div class="absolute bottom-2 w-full">
      <div class="mx-2 flex flex-row justify-between">
        <div
          class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]"
        >
          <Icon name="cuida:calendar-outline" />
          <span class="select-none">
            {formatDate(props.published, LingLongConfig.locale)}
          </span>
        </div>
        {/* 修改：移动端显示一级分类，点击可跳转到一级分类页面 */}
        {/* 原来显示：props.category，现在显示：props.first_level_category */}
        {
          props.first_level_category && (
            <div class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]">
              <Icon name="dashicons:category" />
              <span class="max-w-28 select-none truncate">
                {props.first_level_category}
              </span>
            </div>
          )
        }
      </div>
    </div>
  </a>
  <div class="flex h-[128px] flex-row lg:h-[212px]">
    <div
      class="flex w-full flex-col justify-between pb-5 pl-5 pr-6 pt-3 lg:w-[calc(var(--page-width-lg)-404px)] lg:py-7 lg:pr-0 xl:w-[calc(var(--page-width-xl)-676px)]"
    >
      <div class="flex w-full flex-row items-center">
        <div
          class="mx-2 hidden h-6 w-1 translate-y-[1px] rounded-lg bg-[var(--primary-color)] lg:block"
        >
        </div>
        <a href={contentUrl} class="title">
          <p class="truncate">{props.title}</p>
          <Icon
            name="cuida:caret-right-outline"
            class="translate-y-[0.07rem] text-[var(--primary-color)]"
          />
        </a>
      </div>
      <div class="ml-2 hidden lg:block">
        <ul class="flex flex-row space-x-4">
          <li class="data space-x-2">
            {/* 日历/编写日期标识，和tag相同 */}
            <PostCardInfoIcon name="cuida:calendar-outline" />
            <span class="select-none">
              {formatDate(props.published, LingLongConfig.locale)}
            </span>
          </li>
          {/* 修改：桌面端显示一级分类，点击可跳转到一级分类页面 */}
          {/* 原来的链接：/categories/${IdToSlug(props.category)} */}
          {/* 现在的链接：/categories/${IdToSlug(props.first_level_category)} */}
          {
            props.first_level_category && (
              <li class="data space-x-1.5">
                {/* 一级分类标识，和tag相同 */}
                <PostCardInfoIcon name="dashicons:category" />
                <a
                  class="select-none rounded-md px-1.5 py-0.5 text-[var(--text-color-lighten)] transition-all hover:bg-[var(--primary-color-lighten)] hover:text-[var(--primary-color)]"
                  href={`/categories/${IdToSlug(props.first_level_category)}`}
                >
                  {props.first_level_category}
                </a>
              </li>
            )
          }
          <li
            class="hidden items-center overflow-clip md:block lg:hidden xl:block"
          >
            {
              props.tags && (
                <div class="data space-x-2">
                  {/* 卡片图标 */}
                  <PostCardInfoIcon name="mdi:tag-outline" />
                  <ul class="flex flex-row items-center space-x-1">
                    {/* 文章tag标识，最多呈现前三个tag */}
                    {props.tags.slice(0, 3).map((tag, index) => (
                      <li class="flex select-none flex-row items-center text-[var(--text-color-lighten)]">
                        {index > 0 && <span class="pr-1">/</span>}
                        {/* url链接在这 */}
                        <a
                          class="rounded-md px-1.5 py-0.5 transition-all hover:bg-[var(--primary-color-lighten)] hover:text-[var(--primary-color)]"
                          href={`/tags/${IdToSlug(tag)}`}
                        >
                          {tag}
                        </a>  
                      </li>
                    ))}
                  </ul>
                </div>
              )
            }
          </li>
        </ul>
      </div>
      <div class="lg:ml-2">
        <p class="desc">{props.description}</p>
      </div>
      <div>
        <div class="select-none lg:ml-2">
          <div class="reading-time">
            <span>
              <!-- 卡片下方的字数标识 -->
              {wordCount ?? 0}
              {i18n(I18nKeys.post_card_words)}
            </span>
          </div>
        </div>
      </div>
    </div>
    <div class="cover-container">
      <a href={contentUrl} class="cover-wrapper">
        <!-- 渲染卡片右侧的图片 -->
        <!-- Rendering the card image -->
        <Icon class="right-icon" name="cuida:caret-right-outline" size={96} />
        <img
          class="lozad h-[212px] w-[404px] select-none rounded-r-3xl object-cover dark:brightness-90"
          data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
          alt="PostCover"
        />
        <!-- 这里没有使用常规的 src 属性，而是用了 data-src。这是因为项目使用了一个叫做 lozad.js 的图片懒加载库。
        工作原理： 页面刚加载时，图片并不会被下载。只有当用户滚动页面，
        这张卡片即将进入视窗时，lozad.js 才会把 data-src 的值赋给 src，从而触发图片下载。
        优点： 极大地提升了页面的初始加载速度，特别是当一个页面有很多文章卡片时。 -->
        <!-- props.image ?? GetCoverURLForSpecifiedEntry(entryID) 这段代码是一个非常优雅的空值合并操作。
        “如果在文章的元数据（props）中明确指定了 image 字段（即你为这篇文章设置了特定的封面图），那么就使用这个指定的图片地址。”
        “否则（如果你没有为这篇文章设置封面），就调用 GetCoverURLForSpecifiedEntry(entryID) 这个函数，根据文章ID自动生成一个默认的封面图。 -->
      </a>
    </div>
  </div>
</div>
<style>
  .title {
    @apply flex w-full flex-row items-center space-x-1 align-top text-xl font-semibold text-[var(--text-color)] lg:text-2xl;
    @apply transition-all hover:text-[var(--primary-color)];
    font-family: var(--primary-font);
  }

  .data {
    font-family: var(--primary-font);
    @apply flex flex-row items-center;
  }

  .data > span {
    @apply inline-block self-center truncate align-middle text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .desc {
    @apply line-clamp-1 text-[var(--text-color)];
    font-family: var(--primary-font);
  }

  .reading-time {
    @apply space-x-3 align-middle text-sm text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .cover-container {
    @apply relative ml-2 hidden h-[212px] min-w-[404px] max-w-[404px] select-none lg:block;
    clip-path: polygon(0 0%, 100% 0%, 100% 100%, 10% 100%);
  }

  .cover-wrapper {
    @apply h-full w-full select-none overflow-hidden rounded-r-3xl;
  }

  .cover-wrapper::before {
    @apply absolute left-0 h-full w-0 select-none rounded-r-3xl bg-black opacity-50;
    content: "";
    z-index: 1;
    transition: all 0.3s;
  }

  .cover-wrapper::before:hover {
    @apply h-full w-full select-none;
  }

  .right-icon {
    @apply absolute left-1/2 top-1/2 z-[10] -translate-x-1/2 -translate-y-1/2 text-white;
    clip-path: polygon(0 0, 0 0, 0 100%, 0 100%);
    transition: all 0.3s;
  }

  .cover-wrapper:hover .right-icon {
    clip-path: polygon(0 0, 100% 0%, 100% 100%, 0 100%);
  }
</style>
